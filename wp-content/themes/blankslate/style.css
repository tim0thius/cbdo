@charset "UTF-8";

/*!
Theme Name: BlankSlate
Theme URI: https://github.com/tidythemes/blankslate
Author: TidyThemes...
Author URI: http://tidythemes.com/
Description: <strong>UPDATE</strong> - 4.0+ is here, completely overhauled, yet again. As always, <a href="http://tidythemes.com/concept/#upgrading">use caution when upgrading</a> (tidythemes.com/concept/#upgrading) and <a href="http://tidythemes.com/concept/">learn the TidyThemes concept</a> (tidythemes.com/concept). &nbsp; &rarr; <em><strong>CAUTION</strong>: If you're child theming or have clients that are child theming on top of BlankSlate (not the recommended use), please do not blindly upgrade to newer versions.</em> &nbsp; &rarr; <strong>DESCRIPTION</strong>: BlankSlate is the definitive WordPress HTML5 boilerplate starter theme. We've carefully constructed the most clean and minimalist theme available anywhere for designers/developers to use as a base/foundation to build websites for clients or to build completely custom themes from scratch to release faster. Clean, semi-minified, unformatted and valid code, SEO-friendly, no programmer comments, standardized and as white label as possible and most importantly, CSS reset for cross-browser-compatability and no intrusive visual CSS styles added whatsoever. A perfect skeleton theme that blows any others like it (the subsequent underscores.me for example) completely out of the water, as they're simply too overcomplicated for what people really want in this kind of theme. Now comes with jQuery enqueued and ready to go. &nbsp; &rarr; <strong>SUPPORT</strong>: Please use the <a href="http://tidythemes.com/forum/">official support forum</a> (tidythemes.com/forum). Comments and suggestions for improving BlankSlate, please see "<a href="http://tidythemes.com/tidythemes-sucks/">TidyThemes Sucks!</a>" (tidythemes.com/tidythemes-sucks). Just getting started? <a href="http://tidythemes.com/want-to-learn-css/">Want to learn CSS?</a> (tidythemes.com/want-to-learn-css) &nbsp; &rarr; <strong>WHAT'S NEW?</strong>: We stripped down as much custom, extraneous, superfluous junk code as we could and greatly improved the HTML5 structure. <a href="http://make.wordpress.org/themes/author/chipbennett/">Chip Bennett</a> (make.wordpress.org/themes/author/chipbennett), a highly experienced programmer and official WordPress administrator, worked closely with us to audit the theme code for quality. <a href="http://themes.trac.wordpress.org/changeset?old_path=/blankslate/3.3&new_path=/blankslate/4.0">See</a> (themes.trac.wordpress.org/changeset?old_path=/blankslate/3.3&new_path=/blankslate/4.0) just how much we've revamped things. Last, but not least, BlankSlate has now been <a href="https://github.com/tidythemes/blankslate">opened up on GitHub</a> (github.com/tidythemes/blankslate) if anyone would like to make suggested code additions/improvements. Thank you for using BlankSlate.
Version: 4.0.4
License: GNU General Public License
License URI: https://www.gnu.org/licenses/gpl.html
Tags: one-column, two-columns, custom-menu, featured-images, microformats, sticky-post, threaded-comments, translation-ready
Text Domain: blankslate

BlankSlate WordPress Theme © 2011-2017 TidyThemes
BlankSlate is distributed under the terms of the GNU GPL
*/

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  font-size: 100%;
  font: inherit;
  padding: 0;
  border: 0;
  margin: 0;
  vertical-align: baseline;
}

body {
  line-height: 1;
}

ol,
ul {
  list-style: none;
}

blockquote,
q {
  quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

.clear {
  clear: both;
}

.screen-reader-text {
  clip: rect(1px, 1px, 1px, 1px);
  position: absolute !important;
}

/*------------------------------------*    $CSSWIZARDRY-GRIDS
\*------------------------------------*/

/**
 * CONTENTS
 * INTRODUCTION.........How the grid system works.
 * VARIABLES............Your settings.
 * MIXINS...............Library mixins.
 * GRID SETUP...........Build the grid structure.
 * WIDTHS...............Build our responsive widths around our breakpoints.
 * PUSH.................Push classes.
 * PULL.................Pull classes.
 */

/*------------------------------------*    $INTRODUCTION
\*------------------------------------*/

/**
 * csswizardry grids provides you with widths to suit a number of breakpoints
 * designed around devices of a size you specify. Out of the box, csswizardry
 * grids caters to the following types of device:
 *
 * palm     --  palm-based devices, like phones and small tablets
 * lap      --  lap-based devices, like iPads or laptops
 * portable --  all of the above
 * desk     --  stationary devices, like desktop computers
 * regular  --  any/all types of device
 *
 * These namespaces are then used in the library to give you the ability to
 * manipulate your layouts based around them, for example:
 *
   <div class="grid__item  one-whole  lap--one-half  desk--one-third">
 *
 * This would give you a grid item which is 100% width unless it is on a lap
 * device, at which point it become 50% wide, or it is on a desktop device, at
 * which point it becomes 33.333% width.
 *
 * csswizardry grids also has push and pull classes which allow you to nudge
 * grid items left and right by a defined amount. These follow the same naming
 * convention as above, but are prepended by either `push--` or `pull--`, for
 * example:
 *
   `class="grid__item  one-half  push--one-half"`
 *
 * This would give you a grid item which is 50% width and pushed over to the
 * right by 50%.
 *
 * All classes in csswizardry grids follow this patten, so you should fairly
 * quickly be able to piece together any combinations you can imagine, for
 * example:
 *
   `class="grid__item  one-whole  lap--one-half  desk--one-third  push--desk--one-third"`
 *
   `class="grid__item  one-quarter  palm--one-half  push--palm--one-half"`
 *
   `class="grid__item  palm--one-third  desk--five-twelfths"`
 */

/*------------------------------------*    $VARIABLES
\*------------------------------------*/

/**
 * If you are building a non-responsive site but would still like to use
 * csswizardry-grids, set this to ‘false’:
 */

/**
 * Is this build mobile first? Setting to ‘true’ means that all grids will be
 * 100% width if you do not apply a more specific class to them.
 */

/**
 * Set the spacing between your grid items.
 */

/**
 * Would you like Sass’ silent classes, or regular CSS classes?
 */

/**
 * Would you like push and pull classes enabled?
 */

/**
 * Using `inline-block` means that the grid items need their whitespace removing
 * in order for them to work correctly. Set the following to true if you are
 * going to achieve this by manually removing/commenting out any whitespace in
 * your HTML yourself.
 *
 * Setting this to false invokes a hack which cannot always be guaranteed,
 * please see the following for more detail:
 *
 * github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
 * github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371
 */

/**
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.palm--one-half`), the second value is the media query
 * that the breakpoint fires at.
 */

/**
 * Define which namespaced breakpoints you would like to generate for each of
 * widths, push and pull. This is handy if you only need pull on, say, desk, or
 * you only need a new width breakpoint at mobile sizes. It allows you to only
 * compile as much CSS as you need. All are turned on by default, but you can
 * add and remove breakpoints at will.
 *
 * Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`
 * have been set to ‘true’.
 */

/**
 * You do not need to edit anything from this line onward; csswizardry-grids is
 * good to go. Happy griddin’!
 */

/*------------------------------------*    $MIXINS
\*------------------------------------*/

/**
 * These mixins are for the library to use only, you should not need to modify
 * them at all.
 *
 * Enclose a block of code with a media query as named in `$breakpoints`.
 */

/**
 * Drop relative positioning into silent classes which can’t take advantage of
 * the `[class*="push--"]` and `[class*="pull--"]` selectors.
 */

/*------------------------------------*    $GRID SETUP
\*------------------------------------*/

/**
 * 1. Allow the grid system to be used on lists.
 * 2. Remove any margins and paddings that might affect the grid system.
 * 3. Apply a negative `margin-left` to negate the columns’ gutters.
 */

.grid {
  list-style: none;
  /* [1] */
  margin: 0;
  /* [2] */
  padding: 0;
  /* [2] */
  margin-left: -24px;
  /* [3] */
}

/**
     * 1. Cause columns to stack side-by-side.
     * 2. Space columns apart.
     * 3. Align columns to the tops of each other.
     * 4. Full-width unless told to behave otherwise.
     * 5. Required to combine fluid widths and fixed gutters.
     */

.grid__item {
  display: inline-block;
  /* [1] */
  padding-left: 24px;
  /* [2] */
  vertical-align: top;
  /* [3] */
  width: 100%;
  /* [4] */
  /* [5] */
  /* [5] */
  box-sizing: border-box;
  /* [5] */
}

/**
 * Reversed grids allow you to structure your source in the opposite order to
 * how your rendered layout will appear. Extends `.grid`.
 */

.grid--rev {
  direction: rtl;
  text-align: left;
}

.grid--rev > .grid__item {
  direction: ltr;
  text-align: left;
}

/**
 * Gutterless grids have all the properties of regular grids, minus any spacing.
 * Extends `.grid`.
 */

.grid--full {
  margin-left: 0;
}

.grid--full > .grid__item {
  padding-left: 0;
}

/**
 * Align the entire grid to the right. Extends `.grid`.
 */

.grid--right {
  text-align: right;
}

.grid--right > .grid__item {
  text-align: left;
}

/**
 * Centered grids align grid items centrally without needing to use push or pull
 * classes. Extends `.grid`.
 */

.grid--center {
  text-align: center;
}

.grid--center > .grid__item {
  text-align: left;
}

/**
 * Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
 * `.grid`.
 */

.grid--middle > .grid__item {
  vertical-align: middle;
}

.grid--bottom > .grid__item {
  vertical-align: bottom;
}

/**
 * Create grids with narrower gutters. Extends `.grid`.
 */

.grid--narrow {
  margin-left: -12px;
}

.grid--narrow > .grid__item {
  padding-left: 12px;
}

/**
 * Create grids with wider gutters. Extends `.grid`.
 */

.grid--wide {
  margin-left: -48px;
}

.grid--wide > .grid__item {
  padding-left: 48px;
}

/*------------------------------------*    $WIDTHS
\*------------------------------------*/

/**
 * Create our width classes, prefixed by the specified namespace.
 */

/**
 * Our regular, non-responsive width classes.
 */

/**
     * Whole
     */

.one-whole {
  width: 100%;
}

/**
     * Halves
     */

.one-half,
.two-quarters,
.three-sixths,
.four-eighths,
.five-tenths,
.six-twelfths {
  width: 50%;
}

/**
     * Thirds
     */

.one-third,
.two-sixths,
.four-twelfths {
  width: 33.333%;
}

.two-thirds,
.four-sixths,
.eight-twelfths {
  width: 66.666%;
}

/**
     * Quarters
     */

.one-quarter,
.two-eighths,
.three-twelfths {
  width: 25%;
}

.three-quarters,
.six-eighths,
.nine-twelfths {
  width: 75%;
}

/**
     * Fifths
     */

.one-fifth,
.two-tenths {
  width: 20%;
}

.two-fifths,
.four-tenths {
  width: 40%;
}

.three-fifths,
.six-tenths {
  width: 60%;
}

.four-fifths,
.eight-tenths {
  width: 80%;
}

/**
     * Sixths
     */

.one-sixth,
.two-twelfths {
  width: 16.666%;
}

.five-sixths,
.ten-twelfths {
  width: 83.333%;
}

/**
     * Eighths
     */

.one-eighth {
  width: 12.5%;
}

.three-eighths {
  width: 37.5%;
}

.five-eighths {
  width: 62.5%;
}

.seven-eighths {
  width: 87.5%;
}

/**
     * Tenths
     */

.one-tenth {
  width: 10%;
}

.three-tenths {
  width: 30%;
}

.seven-tenths {
  width: 70%;
}

.nine-tenths {
  width: 90%;
}

/**
     * Twelfths
     */

.one-twelfth {
  width: 8.333%;
}

.five-twelfths {
  width: 41.666%;
}

.seven-twelfths {
  width: 58.333%;
}

.eleven-twelfths {
  width: 91.666%;
}

/**
 * Our responsive classes, if we have enabled them.
 */

@media only screen and (max-width: 480px) {
  /**
     * Whole
     */

  .palm--one-whole {
    width: 100%;
  }

  /**
     * Halves
     */

  .palm--one-half,
  .palm--two-quarters,
  .palm--three-sixths,
  .palm--four-eighths,
  .palm--five-tenths,
  .palm--six-twelfths {
    width: 50%;
  }

  /**
     * Thirds
     */

  .palm--one-third,
  .palm--two-sixths,
  .palm--four-twelfths {
    width: 33.333%;
  }

  .palm--two-thirds,
  .palm--four-sixths,
  .palm--eight-twelfths {
    width: 66.666%;
  }

  /**
     * Quarters
     */

  .palm--one-quarter,
  .palm--two-eighths,
  .palm--three-twelfths {
    width: 25%;
  }

  .palm--three-quarters,
  .palm--six-eighths,
  .palm--nine-twelfths {
    width: 75%;
  }

  /**
     * Fifths
     */

  .palm--one-fifth,
  .palm--two-tenths {
    width: 20%;
  }

  .palm--two-fifths,
  .palm--four-tenths {
    width: 40%;
  }

  .palm--three-fifths,
  .palm--six-tenths {
    width: 60%;
  }

  .palm--four-fifths,
  .palm--eight-tenths {
    width: 80%;
  }

  /**
     * Sixths
     */

  .palm--one-sixth,
  .palm--two-twelfths {
    width: 16.666%;
  }

  .palm--five-sixths,
  .palm--ten-twelfths {
    width: 83.333%;
  }

  /**
     * Eighths
     */

  .palm--one-eighth {
    width: 12.5%;
  }

  .palm--three-eighths {
    width: 37.5%;
  }

  .palm--five-eighths {
    width: 62.5%;
  }

  .palm--seven-eighths {
    width: 87.5%;
  }

  /**
     * Tenths
     */

  .palm--one-tenth {
    width: 10%;
  }

  .palm--three-tenths {
    width: 30%;
  }

  .palm--seven-tenths {
    width: 70%;
  }

  .palm--nine-tenths {
    width: 90%;
  }

  /**
     * Twelfths
     */

  .palm--one-twelfth {
    width: 8.333%;
  }

  .palm--five-twelfths {
    width: 41.666%;
  }

  .palm--seven-twelfths {
    width: 58.333%;
  }

  .palm--eleven-twelfths {
    width: 91.666%;
  }
}

@media only screen and (min-width: 481px) and (max-width: 1023px) {
  /**
     * Whole
     */

  .lap--one-whole {
    width: 100%;
  }

  /**
     * Halves
     */

  .lap--one-half,
  .lap--two-quarters,
  .lap--three-sixths,
  .lap--four-eighths,
  .lap--five-tenths,
  .lap--six-twelfths {
    width: 50%;
  }

  /**
     * Thirds
     */

  .lap--one-third,
  .lap--two-sixths,
  .lap--four-twelfths {
    width: 33.333%;
  }

  .lap--two-thirds,
  .lap--four-sixths,
  .lap--eight-twelfths {
    width: 66.666%;
  }

  /**
     * Quarters
     */

  .lap--one-quarter,
  .lap--two-eighths,
  .lap--three-twelfths {
    width: 25%;
  }

  .lap--three-quarters,
  .lap--six-eighths,
  .lap--nine-twelfths {
    width: 75%;
  }

  /**
     * Fifths
     */

  .lap--one-fifth,
  .lap--two-tenths {
    width: 20%;
  }

  .lap--two-fifths,
  .lap--four-tenths {
    width: 40%;
  }

  .lap--three-fifths,
  .lap--six-tenths {
    width: 60%;
  }

  .lap--four-fifths,
  .lap--eight-tenths {
    width: 80%;
  }

  /**
     * Sixths
     */

  .lap--one-sixth,
  .lap--two-twelfths {
    width: 16.666%;
  }

  .lap--five-sixths,
  .lap--ten-twelfths {
    width: 83.333%;
  }

  /**
     * Eighths
     */

  .lap--one-eighth {
    width: 12.5%;
  }

  .lap--three-eighths {
    width: 37.5%;
  }

  .lap--five-eighths {
    width: 62.5%;
  }

  .lap--seven-eighths {
    width: 87.5%;
  }

  /**
     * Tenths
     */

  .lap--one-tenth {
    width: 10%;
  }

  .lap--three-tenths {
    width: 30%;
  }

  .lap--seven-tenths {
    width: 70%;
  }

  .lap--nine-tenths {
    width: 90%;
  }

  /**
     * Twelfths
     */

  .lap--one-twelfth {
    width: 8.333%;
  }

  .lap--five-twelfths {
    width: 41.666%;
  }

  .lap--seven-twelfths {
    width: 58.333%;
  }

  .lap--eleven-twelfths {
    width: 91.666%;
  }
}

@media only screen and (max-width: 1023px) {
  /**
     * Whole
     */

  .portable--one-whole {
    width: 100%;
  }

  /**
     * Halves
     */

  .portable--one-half,
  .portable--two-quarters,
  .portable--three-sixths,
  .portable--four-eighths,
  .portable--five-tenths,
  .portable--six-twelfths {
    width: 50%;
  }

  /**
     * Thirds
     */

  .portable--one-third,
  .portable--two-sixths,
  .portable--four-twelfths {
    width: 33.333%;
  }

  .portable--two-thirds,
  .portable--four-sixths,
  .portable--eight-twelfths {
    width: 66.666%;
  }

  /**
     * Quarters
     */

  .portable--one-quarter,
  .portable--two-eighths,
  .portable--three-twelfths {
    width: 25%;
  }

  .portable--three-quarters,
  .portable--six-eighths,
  .portable--nine-twelfths {
    width: 75%;
  }

  /**
     * Fifths
     */

  .portable--one-fifth,
  .portable--two-tenths {
    width: 20%;
  }

  .portable--two-fifths,
  .portable--four-tenths {
    width: 40%;
  }

  .portable--three-fifths,
  .portable--six-tenths {
    width: 60%;
  }

  .portable--four-fifths,
  .portable--eight-tenths {
    width: 80%;
  }

  /**
     * Sixths
     */

  .portable--one-sixth,
  .portable--two-twelfths {
    width: 16.666%;
  }

  .portable--five-sixths,
  .portable--ten-twelfths {
    width: 83.333%;
  }

  /**
     * Eighths
     */

  .portable--one-eighth {
    width: 12.5%;
  }

  .portable--three-eighths {
    width: 37.5%;
  }

  .portable--five-eighths {
    width: 62.5%;
  }

  .portable--seven-eighths {
    width: 87.5%;
  }

  /**
     * Tenths
     */

  .portable--one-tenth {
    width: 10%;
  }

  .portable--three-tenths {
    width: 30%;
  }

  .portable--seven-tenths {
    width: 70%;
  }

  .portable--nine-tenths {
    width: 90%;
  }

  /**
     * Twelfths
     */

  .portable--one-twelfth {
    width: 8.333%;
  }

  .portable--five-twelfths {
    width: 41.666%;
  }

  .portable--seven-twelfths {
    width: 58.333%;
  }

  .portable--eleven-twelfths {
    width: 91.666%;
  }
}

@media only screen and (min-width: 1024px) {
  /**
     * Whole
     */

  .desk--one-whole {
    width: 100%;
  }

  /**
     * Halves
     */

  .desk--one-half,
  .desk--two-quarters,
  .desk--three-sixths,
  .desk--four-eighths,
  .desk--five-tenths,
  .desk--six-twelfths {
    width: 50%;
  }

  /**
     * Thirds
     */

  .desk--one-third,
  .desk--two-sixths,
  .desk--four-twelfths {
    width: 33.333%;
  }

  .desk--two-thirds,
  .desk--four-sixths,
  .desk--eight-twelfths {
    width: 66.666%;
  }

  /**
     * Quarters
     */

  .desk--one-quarter,
  .desk--two-eighths,
  .desk--three-twelfths {
    width: 25%;
  }

  .desk--three-quarters,
  .desk--six-eighths,
  .desk--nine-twelfths {
    width: 75%;
  }

  /**
     * Fifths
     */

  .desk--one-fifth,
  .desk--two-tenths {
    width: 20%;
  }

  .desk--two-fifths,
  .desk--four-tenths {
    width: 40%;
  }

  .desk--three-fifths,
  .desk--six-tenths {
    width: 60%;
  }

  .desk--four-fifths,
  .desk--eight-tenths {
    width: 80%;
  }

  /**
     * Sixths
     */

  .desk--one-sixth,
  .desk--two-twelfths {
    width: 16.666%;
  }

  .desk--five-sixths,
  .desk--ten-twelfths {
    width: 83.333%;
  }

  /**
     * Eighths
     */

  .desk--one-eighth {
    width: 12.5%;
  }

  .desk--three-eighths {
    width: 37.5%;
  }

  .desk--five-eighths {
    width: 62.5%;
  }

  .desk--seven-eighths {
    width: 87.5%;
  }

  /**
     * Tenths
     */

  .desk--one-tenth {
    width: 10%;
  }

  .desk--three-tenths {
    width: 30%;
  }

  .desk--seven-tenths {
    width: 70%;
  }

  .desk--nine-tenths {
    width: 90%;
  }

  /**
     * Twelfths
     */

  .desk--one-twelfth {
    width: 8.333%;
  }

  .desk--five-twelfths {
    width: 41.666%;
  }

  .desk--seven-twelfths {
    width: 58.333%;
  }

  .desk--eleven-twelfths {
    width: 91.666%;
  }
}

/*------------------------------------*    $PUSH
\*------------------------------------*/

/**
 * Push classes, to move grid items over to the right by certain amounts.
 */

/*------------------------------------*    $PULL
\*------------------------------------*/

/**
 * Pull classes, to move grid items back to the left by certain amounts.
 */

body {
  background-color: #fafafa;
  font-family: Helvetica, sans-serif;
  font-size: 16px;
}

.grid__item {
  background-color: #eee;
  margin: 15px 0;
}

.section__inner {
  max-width: 1400px;
  width: 100%;
}

#block-footer {
  -ms-flex-align: center;
      align-items: center;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -ms-flex-pack: center;
      justify-content: center;
  -ms-flex-direction: column;
      flex-direction: column;
  height: 200px;
}

#block-footer--menu #menu-menu-1 {
  -ms-flex-align: center;
      align-items: center;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -ms-flex-pack: center;
      justify-content: center;
  -ms-flex-direction: row;
      flex-direction: row;
}

#block-header {
  -ms-flex-align: stretch;
      align-items: stretch;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -ms-flex-pack: center;
      justify-content: center;
  -ms-flex-direction: row;
      flex-direction: row;
}

#block-header--menu #menu-menu-1 {
  -ms-flex-align: center;
      align-items: center;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -ms-flex-pack: end;
      justify-content: flex-end;
  -ms-flex-direction: row;
      flex-direction: row;
}

#block-header--menu .sub-menu {
  display: none;
}

.block-highlight {
  -ms-flex-align: center;
      align-items: center;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -ms-flex-pack: center;
      justify-content: center;
  -ms-flex-direction: column;
      flex-direction: column;
}

.block-highlight__main-image {
  height: auto;
  max-width: 100%;
  width: 100%;
}

#block-masthead {
  -ms-flex-align: center;
      align-items: center;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -ms-flex-pack: center;
      justify-content: center;
  -ms-flex-direction: column;
      flex-direction: column;
}

.block-masthead__main-image {
  height: auto;
  max-width: 1400px;
  width: 100%;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */